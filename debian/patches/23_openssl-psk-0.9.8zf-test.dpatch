#! /bin/sh /usr/share/dpatch/dpatch-run
## 23_openssl-psk-0.9.8zf-test.dpatch by  <ivo@ivo-H81M-S2PV>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: No description.

@DPATCH@
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' openssl-0.9.8zf~/apps/s_client.c openssl-0.9.8zf/apps/s_client.c
--- openssl-0.9.8zf~/apps/s_client.c	2015-03-19 15:46:45.000000000 +0200
+++ openssl-0.9.8zf/apps/s_client.c	2015-03-21 16:59:40.141940116 +0200
@@ -108,8 +108,35 @@
  * Hudson (tjh@cryptsoft.com).
  *
  */
+/* ====================================================================
+ * Copyright 2005 Nokia. All rights reserved.
+ *
+ * The portions of the attached software ("Contribution") is developed by
+ * Nokia Corporation and is licensed pursuant to the OpenSSL open source
+ * license.
+ *
+ * The Contribution, originally written by Mika Kousa and Pasi Eronen of
+ * Nokia Corporation, consists of the "PSK" (Pre-Shared Key) ciphersuites
+ * support (see draft-ietf-tls-psk-09) to OpenSSL.
+ *
+ * No patent licenses or other rights except those expressly stated in
+ * the OpenSSL open source license shall be deemed granted or received
+ * expressly, by implication, estoppel, or otherwise.
+ *
+ * No assurances are provided by Nokia that the Contribution does not
+ * infringe the patent or other intellectual property rights of any third
+ * party or that the license provides you with all the necessary rights
+ * to make use of the Contribution.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND. IN
+ * ADDITION TO THE DISCLAIMERS INCLUDED IN THE LICENSE, NOKIA
+ * SPECIFICALLY DISCLAIMS ANY LIABILITY FOR CLAIMS BROUGHT BY YOU OR ANY
+ * OTHER ENTITY BASED ON INFRINGEMENT OF INTELLECTUAL PROPERTY RIGHTS OR
+ * OTHERWISE.
+ */
 
 #include <assert.h>
+#include <ctype.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
@@ -199,6 +226,69 @@
 static int c_quiet = 0;
 static int c_ign_eof = 0;
 
+#ifndef OPENSSL_NO_PSK
+/* Default PSK identity and key */
+static char *psk_identity="Client_identity";
+static char *psk_key=NULL; /* by default PSK is not used */
+
+static unsigned int psk_client_cb(SSL *ssl, const char *hint, char *identity,
+    unsigned int max_identity_len, unsigned char *psk,
+    unsigned int max_psk_len)
+    {
+    unsigned int psk_len = 0;
+    int ret;
+    BIGNUM *bn=NULL;
+
+    if (c_debug)
+        BIO_printf(bio_c_out, "psk_client_cb\n");
+    if (!hint)
+        {
+        /* no ServerKeyExchange message*/
+        if (c_debug)
+            BIO_printf(bio_c_out,"NULL received PSK identity hint, continuing anyway\n");
+        }
+    else if (c_debug)
+        BIO_printf(bio_c_out, "Received PSK identity hint '%s'\n", hint);
+
+    /* lookup PSK identity and PSK key based on the given identity hint here */
+    ret = snprintf(identity, max_identity_len, psk_identity);
+    if (ret < 0 || ret > max_identity_len)
+        goto out_err;
+    if (c_debug)
+        BIO_printf(bio_c_out, "created identity '%s' len=%d\n", identity, ret);
+    ret=BN_hex2bn(&bn, psk_key);
+    if (!ret)
+        {
+        BIO_printf(bio_err,"Could not convert PSK key '%s' to BIGNUM\n", psk_key);
+        if (bn)
+            BN_free(bn);
+        return 0;
+        }
+
+    if (BN_num_bytes(bn) > max_psk_len)
+        {
+        BIO_printf(bio_err,"psk buffer of callback is too small (%d) for key (%d)\n",
+            max_psk_len, BN_num_bytes(bn));
+        BN_free(bn);
+        return 0;
+        }
+
+    psk_len=BN_bn2bin(bn, psk);
+    BN_free(bn);
+    if (psk_len == 0)
+        goto out_err;
+
+    if (c_debug)
+        BIO_printf(bio_c_out, "created PSK len=%d\n", psk_len);
+
+    return psk_len;
+out_err:
+    if (c_debug)
+        BIO_printf(bio_err, "Error in PSK client callback\n");
+    return 0;
+    }
+#endif
+
 static void sc_usage(void)
 {
     BIO_printf(bio_err, "usage: s_client args\n");
@@ -245,6 +335,10 @@
     BIO_printf(bio_err, " -quiet        - no s_client output\n");
     BIO_printf(bio_err,
                " -ign_eof      - ignore input eof (default when -quiet)\n");
+#ifndef OPENSSL_NO_PSK
+    BIO_printf(bio_err, " -psk_identity arg - PSK identity\n");
+    BIO_printf(bio_err, " -psk arg      - PSK in hex (without 0x)\n");
+#endif
     BIO_printf(bio_err, " -no_ign_eof   - don't ignore input eof\n");
     BIO_printf(bio_err, " -ssl2         - just use SSLv2\n");
     BIO_printf(bio_err, " -ssl3         - just use SSLv3\n");
@@ -490,6 +584,27 @@
             nbio_test = 1;
         else if (strcmp(*argv, "-state") == 0)
             state = 1;
+#ifndef OPENSSL_NO_PSK
+        else if (strcmp(*argv,"-psk_identity") == 0)
+            {
+            if (--argc < 1) goto bad;
+            psk_identity=*(++argv);
+            }
+        else if (strcmp(*argv,"-psk") == 0)
+            {
+            int i;
+
+            if (--argc < 1) goto bad;
+            psk_key=*(++argv);
+            for (i=0; i<strlen(psk_key); i++)
+                {
+                if (isxdigit((int)psk_key[i]))
+                    continue;
+                BIO_printf(bio_err,"Not a hex number '%s'\n",*argv);
+                goto bad;
+                }
+            }
+#endif
 #ifndef OPENSSL_NO_SSL2
         else if (strcmp(*argv, "-ssl2") == 0)
             meth = SSLv2_client_method();
@@ -707,6 +822,14 @@
         ENGINE_free(ssl_client_engine);
     }
 #endif
+#ifndef OPENSSL_NO_PSK
+    if (psk_key != NULL)
+        {
+        if (c_debug)
+            BIO_printf(bio_c_out, "PSK key given, setting client callback\n");
+        SSL_CTX_set_psk_client_callback(ctx, psk_client_cb);
+        }
+#endif
 
     if (bugs)
         SSL_CTX_set_options(ctx, SSL_OP_ALL | off);
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' openssl-0.9.8zf~/apps/s_server.c openssl-0.9.8zf/apps/s_server.c
--- openssl-0.9.8zf~/apps/s_server.c	2015-03-19 15:46:45.000000000 +0200
+++ openssl-0.9.8zf/apps/s_server.c	2015-03-21 17:04:32.525945053 +0200
@@ -113,6 +113,32 @@
  * ECC cipher suite support in OpenSSL originally developed by
  * SUN MICROSYSTEMS, INC., and contributed to the OpenSSL project.
  */
+/* ====================================================================
+ * Copyright 2005 Nokia. All rights reserved.
+ *
+ * The portions of the attached software ("Contribution") is developed by
+ * Nokia Corporation and is licensed pursuant to the OpenSSL open source
+ * license.
+ *
+ * The Contribution, originally written by Mika Kousa and Pasi Eronen of
+ * Nokia Corporation, consists of the "PSK" (Pre-Shared Key) ciphersuites
+ * support (see draft-ietf-tls-psk-09) to OpenSSL.
+ *
+ * No patent licenses or other rights except those expressly stated in
+ * the OpenSSL open source license shall be deemed granted or received
+ * expressly, by implication, estoppel, or otherwise.
+ *
+ * No assurances are provided by Nokia that the Contribution does not
+ * infringe the patent or other intellectual property rights of any third
+ * party or that the license provides you with all the necessary rights
+ * to make use of the Contribution.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND. IN
+ * ADDITION TO THE DISCLAIMERS INCLUDED IN THE LICENSE, NOKIA
+ * SPECIFICALLY DISCLAIMS ANY LIABILITY FOR CLAIMS BROUGHT BY YOU OR ANY
+ * OTHER ENTITY BASED ON INFRINGEMENT OF INTELLECTUAL PROPERTY RIGHTS OR
+ * OTHERWISE.
+ */
 
 /*
  * Until the key-gen callbacks are modified to use newer prototypes, we allow
@@ -123,6 +149,7 @@
 #endif
 
 #include <assert.h>
+#include <ctype.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
@@ -296,6 +323,69 @@
 #ifndef OPENSSL_NO_DTLS1
 static int cert_chain = 0;
 #endif
+#ifndef OPENSSL_NO_PSK
+static char *psk_identity="Client_identity";
+static char *psk_key=NULL; /* by default PSK is not used */
+
+static unsigned int psk_server_cb(SSL *ssl, const char *identity,
+    unsigned char *psk, unsigned int max_psk_len)
+    {
+    unsigned int psk_len = 0;
+    int ret;
+    BIGNUM *bn = NULL;
+
+    if (s_debug)
+        BIO_printf(bio_s_out,"psk_server_cb\n");
+    if (!identity)
+        {
+        BIO_printf(bio_err,"Error: client did not send PSK identity\n");
+        goto out_err;
+        }
+    if (s_debug)
+        BIO_printf(bio_s_out,"identity_len=%d identity=%s\n",
+            identity ? strlen(identity) : 0, identity);
+
+    /* here we could lookup the given identity e.g. from a database */
+      if (strcmp(identity, psk_identity) != 0)
+        {
+        BIO_printf(bio_s_out, "PSK error: client identity not found\n");
+        goto out_err;
+        }
+    if (s_debug)
+        BIO_printf(bio_s_out, "PSK client identity found\n");
+
+    /* convert the PSK key to binary */
+    ret = BN_hex2bn(&bn, psk_key);
+    if (!ret)
+        {
+        BIO_printf(bio_err,"Could not convert PSK key '%s' to BIGNUM\n", psk_key);
+        if (bn)
+            BN_free(bn);
+        return 0;
+        }
+    if (BN_num_bytes(bn) > max_psk_len)
+        {
+        BIO_printf(bio_err,"psk buffer of callback is too small (%d) for key (%d)\n",
+            max_psk_len, BN_num_bytes(bn));
+        BN_free(bn);
+        return 0;
+        }
+
+    psk_len = BN_bn2bin(bn, psk);
+    BN_free(bn);
+
+    if (psk_len < 0)
+        goto out_err;
+
+    if (s_debug)
+        BIO_printf(bio_s_out, "fetched PSK len=%d\n", psk_len);
+        return psk_len;
+out_err:
+    if (s_debug)
+        BIO_printf(bio_err, "Error in PSK server callback\n");
+    return 0;
+    }
+#endif
 
 #ifdef MONOLITH
 static void s_server_init(void)
@@ -399,6 +489,10 @@
     BIO_printf(bio_err, " -serverpref   - Use server's cipher preferences\n");
     BIO_printf(bio_err, " -quiet        - No server output\n");
     BIO_printf(bio_err, " -no_tmp_rsa   - Do not generate a tmp RSA key\n");
+#ifndef OPENSSL_NO_PSK
+    BIO_printf(bio_err, " -psk_hint arg - PSK identity hint to use\n");
+    BIO_printf(bio_err, " -psk arg      - PSK in hex (without 0x)\n");
+#endif
     BIO_printf(bio_err, " -ssl2         - Just talk SSLv2\n");
     BIO_printf(bio_err, " -ssl3         - Just talk SSLv3\n");
     BIO_printf(bio_err, " -tls1         - Just talk TLSv1\n");
@@ -814,6 +908,10 @@
 #ifndef OPENSSL_NO_TLSEXT
     tlsextctx tlsextcbp = { NULL, NULL, SSL_TLSEXT_ERR_ALERT_WARNING };
 #endif
+#ifndef OPENSSL_NO_PSK
+    /* by default do not send a PSK identity hint */
+    static char *psk_identity_hint=NULL;
+#endif
 
     meth = SSLv23_server_method();
 
@@ -1000,6 +1098,23 @@
             no_dhe = 1;
         } else if (strcmp(*argv, "-no_ecdhe") == 0) {
             no_ecdhe = 1;
+#ifndef OPENSSL_NO_PSK
+        } else if (strcmp(*argv,"-psk_hint") == 0) {
+            if (--argc < 1) goto bad;
+            psk_identity_hint= *(++argv);
+        }
+        else if (strcmp(*argv,"-psk") == 0) {
+            int i;
+
+            if (--argc < 1) goto bad;
+            psk_key=*(++argv);
+            for (i=0; i<strlen(psk_key); i++) {
+                if (isxdigit((int)psk_key[i]))
+                    continue;
+                BIO_printf(bio_err,"Not a hex number '%s'\n",*argv);
+                goto bad;
+            }
+#endif
         } else if (strcmp(*argv, "-www") == 0) {
             www = 1;
         } else if (strcmp(*argv, "-WWW") == 0) {
@@ -1452,6 +1567,21 @@
     }
 # endif
 #endif
+#ifndef OPENSSL_NO_PSK
+    if (psk_key != NULL)
+        {
+        if (s_debug)
+            BIO_printf(bio_s_out, "PSK key given, setting server callback\n");
+        SSL_CTX_set_psk_server_callback(ctx, psk_server_cb);
+        }
+
+        if (!SSL_CTX_use_psk_identity_hint(ctx, psk_identity_hint))
+        {
+        BIO_printf(bio_err,"error setting PSK identity hint to context\n");
+        ERR_print_errors(bio_err);
+        goto end;
+        }
+#endif
 
     if (cipher != NULL)
         if (!SSL_CTX_set_cipher_list(ctx, cipher)) {
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' openssl-0.9.8zf~/ssl/ssltest.c openssl-0.9.8zf/ssl/ssltest.c
--- openssl-0.9.8zf~/ssl/ssltest.c	2015-03-19 15:46:46.000000000 +0200
+++ openssl-0.9.8zf/ssl/ssltest.c	2015-03-21 17:09:04.625949647 +0200
@@ -113,6 +113,32 @@
  * ECC cipher suite support in OpenSSL originally developed by
  * SUN MICROSYSTEMS, INC., and contributed to the OpenSSL project.
  */
+/* ====================================================================
+ * Copyright 2005 Nokia. All rights reserved.
+ *
+ * The portions of the attached software ("Contribution") is developed by
+ * Nokia Corporation and is licensed pursuant to the OpenSSL open source
+ * license.
+ *
+ * The Contribution, originally written by Mika Kousa and Pasi Eronen of
+ * Nokia Corporation, consists of the "PSK" (Pre-Shared Key) ciphersuites
+ * support (see draft-ietf-tls-psk-09) to OpenSSL.
+ *
+ * No patent licenses or other rights except those expressly stated in
+ * the OpenSSL open source license shall be deemed granted or received
+ * expressly, by implication, estoppel, or otherwise.
+ *
+ * No assurances are provided by Nokia that the Contribution does not
+ * infringe the patent or other intellectual property rights of any third
+ * party or that the license provides you with all the necessary rights
+ * to make use of the Contribution.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND. IN
+ * ADDITION TO THE DISCLAIMERS INCLUDED IN THE LICENSE, NOKIA
+ * SPECIFICALLY DISCLAIMS ANY LIABILITY FOR CLAIMS BROUGHT BY YOU OR ANY
+ * OTHER ENTITY BASED ON INFRINGEMENT OF INTELLECTUAL PROPERTY RIGHTS OR
+ * OTHERWISE.
+ */
 
 /* Or gethostname won't be declared properly on Linux and GNU platforms. */
 #define _BSD_SOURCE 1
@@ -212,6 +238,15 @@
 static DH *get_dh1024dsa(void);
 #endif
 
+static char *psk_key=NULL; /* by default PSK is not used */
+#ifndef OPENSSL_NO_PSK
+static unsigned int psk_client_callback(SSL *ssl, const char *hint, char *identity,
+    unsigned int max_identity_len, unsigned char *psk,
+    unsigned int max_psk_len);
+static unsigned int psk_server_callback(SSL *ssl, const char *identity, unsigned char *psk,
+    unsigned int max_psk_len);
+#endif
+
 static BIO *bio_err = NULL;
 static BIO *bio_stdout = NULL;
 
@@ -261,6 +296,9 @@
 #ifndef OPENSSL_NO_ECDH
     fprintf(stderr, " -no_ecdhe     - disable ECDHE\n");
 #endif
+#ifndef OPENSSL_NO_PSK
+    fprintf(stderr, " -psk arg      - PSK in hex (without 0x)\n");
+#endif
 #ifndef OPENSSL_NO_SSL2
     fprintf(stderr, " -ssl2         - use SSLv2\n");
 #endif
@@ -422,6 +460,7 @@
 #endif
     int no_dhe = 0;
     int no_ecdhe = 0;
+    int no_psk = 0;
     int print_time = 0;
     clock_t s_time = 0, c_time = 0;
     int comp = 0;
@@ -505,6 +544,20 @@
             no_dhe = 1;
         else if (strcmp(*argv, "-no_ecdhe") == 0)
             no_ecdhe = 1;
+        else if (strcmp(*argv,"-psk") == 0)
+            {
+            if (--argc < 1) goto bad;
+            psk_key=*(++argv);
+#ifndef OPENSSL_NO_PSK
+            if (strspn(psk_key, "abcdefABCDEF1234567890") != strlen(psk_key))
+                {
+                BIO_printf(bio_err,"Not a hex number '%s'\n",*argv);
+                goto bad;
+                }
+#else
+            no_psk=1;
+#endif
+            }
         else if (strcmp(*argv, "-ssl2") == 0)
             ssl2 = 1;
         else if (strcmp(*argv, "-tls1") == 0)
@@ -810,6 +863,31 @@
                                        sizeof session_id_context);
     }
 
+    /* Use PSK only if PSK key is given */
+    if (psk_key != NULL)
+        {
+        /* no_psk is used to avoid putting psk command to openssl tool */
+        if (no_psk)
+            {
+            /* if PSK is not compiled in and psk key is
+             * given, do nothing and exit successfully */
+            ret=0;
+            goto end;
+            }
+#ifndef OPENSSL_NO_PSK
+        SSL_CTX_set_psk_client_callback(c_ctx, psk_client_callback);
+        SSL_CTX_set_psk_server_callback(s_ctx, psk_server_callback);
+        if (debug)
+            BIO_printf(bio_err,"setting PSK identity hint to s_ctx\n");
+        if (!SSL_CTX_use_psk_identity_hint(s_ctx, "ctx server identity_hint"))
+            {
+            BIO_printf(bio_err,"error setting PSK identity hint to s_ctx\n");
+            ERR_print_errors(bio_err);
+            goto end;
+            }
+#endif
+        }
+
     c_ssl = SSL_new(c_ctx);
     s_ssl = SSL_new(s_ctx);
 
@@ -2206,3 +2284,69 @@
 
     return 1;
 }
+
+#ifndef OPENSSL_NO_PSK
+/* convert the PSK key (psk_key) in ascii to binary (psk) */
+int psk_key2bn(const char *psk_key, unsigned char *psk, unsigned int max_psk_len)
+    {
+    unsigned int psk_len = 0;
+    int ret;
+    BIGNUM *bn = NULL;
+
+    ret = BN_hex2bn(&bn, psk_key);
+    if (!ret)
+        {
+        BIO_printf(bio_err,"Could not convert PSK key '%s' to BIGNUM\n", psk_key);
+        if (bn)
+            BN_free(bn);
+        return 0;
+        }
+    if (BN_num_bytes(bn) > max_psk_len)
+        {
+        BIO_printf(bio_err,"psk buffer of callback is too small (%d) for key (%d)\n",
+            max_psk_len, BN_num_bytes(bn));
+        BN_free(bn);
+        return 0;
+        }
+    psk_len = BN_bn2bin(bn, psk);
+    BN_free(bn);
+    if (psk_len < 0)
+        goto out_err;
+    return psk_len;
+ out_err:
+    return 0;
+    }
+
+static unsigned int psk_client_callback(SSL *ssl, const char *hint, char *identity,
+    unsigned int max_identity_len, unsigned char *psk,
+    unsigned int max_psk_len)
+    {
+    int ret;
+    unsigned int psk_len = 0;
+
+    ret = snprintf(identity, max_identity_len, "Client_identity");
+    if (ret < 0)
+        goto out_err;
+    if (debug)
+        fprintf(stderr, "client: created identity '%s' len=%d\n", identity, ret);
+    psk_len=psk_key2bn(psk_key, psk, max_psk_len);
+    if (psk_len < 0)
+        goto out_err;
+ out_err:
+    return psk_len;
+    }
+
+static unsigned int psk_server_callback(SSL *ssl, const char *identity,
+    unsigned char *psk, unsigned int max_psk_len)
+    {
+    unsigned int psk_len=0;
+
+    if (strcmp(identity, "Client_identity") != 0)
+        {
+        BIO_printf(bio_err, "server: PSK error: client identity not found\n");
+        return 0;
+        }
+    psk_len=psk_key2bn(psk_key, psk, max_psk_len);
+    return psk_len;
+    }
+#endif
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' openssl-0.9.8zf~/test/testssl openssl-0.9.8zf/test/testssl
--- openssl-0.9.8zf~/test/testssl	2015-03-19 15:46:01.000000000 +0200
+++ openssl-0.9.8zf/test/testssl	2015-03-21 17:10:09.865950748 +0200
@@ -159,4 +159,10 @@
   fi
 fi
 
+echo test tls1 with PSK
+$ssltest -tls1 -cipher PSK -psk abc123 $extra || exit 1
+
+echo test tls1 with PSK via BIO pair
+$ssltest -bio_pair -tls1 -cipher PSK -psk abc123 $extra || exit 1
+
 exit 0
