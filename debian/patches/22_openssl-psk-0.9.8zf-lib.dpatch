#! /bin/sh /usr/share/dpatch/dpatch-run
## 22_openssl-psk-0.9.8zf-lib.dpatch by  <ivo@ivo-H81M-S2PV>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: No description.

@DPATCH@
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' openssl-0.9.8zf~/ssl/s3_clnt.c openssl-0.9.8zf/ssl/s3_clnt.c
--- openssl-0.9.8zf~/ssl/s3_clnt.c	2015-03-19 15:46:46.000000000 +0200
+++ openssl-0.9.8zf/ssl/s3_clnt.c	2015-03-19 21:50:33.776127153 +0200
@@ -121,6 +121,32 @@
  * Vipul Gupta and Sumit Gupta of Sun Microsystems Laboratories.
  *
  */
+/* ====================================================================
+ * Copyright 2005 Nokia. All rights reserved.
+ *
+ * The portions of the attached software ("Contribution") is developed by
+ * Nokia Corporation and is licensed pursuant to the OpenSSL open source
+ * license.
+ *
+ * The Contribution, originally written by Mika Kousa and Pasi Eronen of
+ * Nokia Corporation, consists of the "PSK" (Pre-Shared Key) ciphersuites
+ * support (see draft-ietf-tls-psk-09) to OpenSSL.
+ *
+ * No patent licenses or other rights except those expressly stated in
+ * the OpenSSL open source license shall be deemed granted or received
+ * expressly, by implication, estoppel, or otherwise.
+ *
+ * No assurances are provided by Nokia that the Contribution does not
+ * infringe the patent or other intellectual property rights of any third
+ * party or that the license provides you with all the necessary rights
+ * to make use of the Contribution.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND. IN
+ * ADDITION TO THE DISCLAIMERS INCLUDED IN THE LICENSE, NOKIA
+ * SPECIFICALLY DISCLAIMS ANY LIABILITY FOR CLAIMS BROUGHT BY YOU OR ANY
+ * OTHER ENTITY BASED ON INFRINGEMENT OF INTELLECTUAL PROPERTY RIGHTS OR
+ * OTHERWISE.
+ */
 
 #include <stdio.h>
 #include "ssl_locl.h"
@@ -294,7 +320,9 @@
             }
 #endif
             /* Check if it is anon DH/ECDH */
-            if (!(s->s3->tmp.new_cipher->algorithms & SSL_aNULL)) {
+            /* or PSK */
+            if (!(s->s3->tmp.new_cipher->algorithms & SSL_aNULL)
+            && !(s->s3->tmp.new_cipher->algorithms & SSL_kPSK)) {
                 ret = ssl3_get_server_certificate(s);
                 if (ret <= 0)
                     goto end;
@@ -1115,6 +1143,18 @@
             al = SSL_AD_UNEXPECTED_MESSAGE;
             goto f_err;
         }
+#ifndef OPENSSL_NO_PSK
+        /* In plain PSK ciphersuite, ServerKeyExchange can be
+           omitted if no identity hint is sent. Set
+           session->sess_cert anyway to avoid problems
+           later.*/
+        if (alg & SSL_kPSK) {
+            s->session->sess_cert=ssl_sess_cert_new();
+            if (s->ctx->psk_identity_hint)
+                OPENSSL_free(s->ctx->psk_identity_hint);
+            s->ctx->psk_identity_hint=NULL;
+        }
+#endif
         s->s3->tmp.reuse_message = 1;
         return (1);
     }
@@ -1148,6 +1188,47 @@
     param_len = 0;
 
     al = SSL_AD_DECODE_ERROR;
+#ifndef OPENSSL_NO_PSK
+    if (alg & SSL_kPSK) {
+        char tmp_id_hint[PSK_MAX_IDENTITY_LEN + 1];
+
+        al = SSL_AD_HANDSHAKE_FAILURE;
+        n2s(p,i);
+        param_len = i + 2;
+        /* Store PSK identity hint for later use, hint is used
+         * in ssl3_send_client_key_exchange.  Assume that the
+         * maximum length of a PSK identity hint can be as
+         * long as the maximum length of a PSK identity. */
+        if (i > PSK_MAX_IDENTITY_LEN) {
+            SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE,
+                SSL_R_DATA_LENGTH_TOO_LONG);
+            goto f_err;
+        }
+        if (param_len > n) {
+            al = SSL_AD_DECODE_ERROR;
+            SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE,
+                SSL_R_BAD_PSK_IDENTITY_HINT_LENGTH);
+            goto f_err;
+        }
+        /* If received PSK identity hint contains NULL
+         * characters, the hint is truncated from the first
+         * NULL. p may not be ending with NULL, so create a
+         * NULL-terminated string. */
+        memcpy(tmp_id_hint, p, i);
+        memset(tmp_id_hint+i, 0, PSK_MAX_IDENTITY_LEN + 1 - i);
+        if (s->ctx->psk_identity_hint != NULL)
+            OPENSSL_free(s->ctx->psk_identity_hint);
+        s->ctx->psk_identity_hint = BUF_strdup(tmp_id_hint);
+        if (s->ctx->psk_identity_hint == NULL) {
+            SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_MALLOC_FAILURE);
+            goto f_err;
+        }
+
+        p += i;
+        n -= param_len;
+    }
+    else
+#endif /* !OPENSSL_NO_PSK */
 #ifndef OPENSSL_NO_RSA
     if (alg & SSL_kRSA) {
         /* Temporary RSA keys only allowed in export ciphersuites */
@@ -1517,11 +1598,12 @@
             goto err;
         }
     } else {
-        /* still data left over */
-        if (!(alg & SSL_aNULL)) {
+        if (!(alg & SSL_aNULL) && !(alg & SSL_kPSK)) {
+            /* aNULL or kPSK do not need public keys */
             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);
             goto err;
         }
+        /* still data left over */
         if (n != 0) {
             SSLerr(SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_EXTRA_DATA_IN_MESSAGE);
             goto f_err;
@@ -2324,6 +2406,81 @@
             EVP_PKEY_free(srvr_pub_pkey);
         }
 #endif                          /* !OPENSSL_NO_ECDH */
+#ifndef OPENSSL_NO_PSK
+        else if (l & SSL_kPSK) {
+            char identity[PSK_MAX_IDENTITY_LEN];
+            unsigned char *t = NULL;
+            unsigned char psk_or_pre_ms[PSK_MAX_PSK_LEN * 2 + 4];
+            unsigned int pre_ms_len = 0, psk_len = 0;
+            int psk_err = 1;
+
+            n = 0;
+            if (s->psk_client_callback == NULL) {
+                SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,
+                    SSL_R_PSK_NO_CLIENT_CB);
+                goto err;
+            }
+
+            psk_len = s->psk_client_callback(s, s->ctx->psk_identity_hint,
+                identity, PSK_MAX_IDENTITY_LEN,
+                psk_or_pre_ms, sizeof(psk_or_pre_ms));
+            if (psk_len > PSK_MAX_PSK_LEN) {
+                SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,
+                    ERR_R_INTERNAL_ERROR);
+                goto psk_err;
+            }
+            else if (psk_len == 0) {
+                SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,
+                    SSL_R_PSK_IDENTITY_NOT_FOUND);
+                goto psk_err;
+            }
+
+            /* create PSK pre_master_secret */
+            pre_ms_len = 2 + psk_len + 2 + psk_len;
+            t = psk_or_pre_ms;
+            memmove(psk_or_pre_ms+psk_len + 4, psk_or_pre_ms, psk_len);
+            s2n(psk_len, t);
+            memset(t, 0, psk_len);
+            t += psk_len;
+            s2n(psk_len, t);
+
+            if (s->session->psk_identity_hint != NULL)
+                OPENSSL_free(s->session->psk_identity_hint);
+            s->session->psk_identity_hint = BUF_strdup(s->ctx->psk_identity_hint);
+            if (s->ctx->psk_identity_hint != NULL &&
+                s->session->psk_identity_hint == NULL) {
+                SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,
+                    ERR_R_MALLOC_FAILURE);
+                goto psk_err;
+            }
+
+            if (s->session->psk_identity != NULL)
+                OPENSSL_free(s->session->psk_identity);
+            s->session->psk_identity = BUF_strdup(identity);
+            if (s->session->psk_identity == NULL) {
+                SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE,
+                    ERR_R_MALLOC_FAILURE);
+                goto psk_err;
+            }
+
+            s->session->master_key_length =
+                s->method->ssl3_enc->generate_master_secret(s,
+                    s->session->master_key,
+                    psk_or_pre_ms, pre_ms_len); 
+            n = strlen(identity);
+            s2n(n, p);
+            memcpy(p, identity, n);
+            n += 2;
+            psk_err = 0;
+        psk_err:
+            OPENSSL_cleanse(identity, PSK_MAX_IDENTITY_LEN);
+            OPENSSL_cleanse(psk_or_pre_ms, sizeof(psk_or_pre_ms));    
+            if (psk_err != 0) {
+                ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_HANDSHAKE_FAILURE);
+                goto err;
+            }
+        }
+#endif
         else {
             ssl3_send_alert(s, SSL3_AL_FATAL, SSL_AD_HANDSHAKE_FAILURE);
             SSLerr(SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE, ERR_R_INTERNAL_ERROR);
@@ -2520,7 +2677,7 @@
     algs = s->s3->tmp.new_cipher->algorithms;
 
     /* we don't have a certificate */
-    if (algs & (SSL_aDH | SSL_aNULL | SSL_aKRB5))
+    if (algs & (SSL_aDH | SSL_aNULL | SSL_aKRB5 | SSL_kPSK))
         return (1);
 
     if (sc == NULL) {
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' openssl-0.9.8zf~/ssl/s3_lib.c openssl-0.9.8zf/ssl/s3_lib.c
--- openssl-0.9.8zf~/ssl/s3_lib.c	2015-03-19 15:46:46.000000000 +0200
+++ openssl-0.9.8zf/ssl/s3_lib.c	2015-03-19 21:56:50.232133509 +0200
@@ -121,6 +121,32 @@
  * Vipul Gupta and Sumit Gupta of Sun Microsystems Laboratories.
  *
  */
+/* ====================================================================
+ * Copyright 2005 Nokia. All rights reserved.
+ *
+ * The portions of the attached software ("Contribution") is developed by
+ * Nokia Corporation and is licensed pursuant to the OpenSSL open source
+ * license.
+ *
+ * The Contribution, originally written by Mika Kousa and Pasi Eronen of
+ * Nokia Corporation, consists of the "PSK" (Pre-Shared Key) ciphersuites
+ * support (see draft-ietf-tls-psk-09) to OpenSSL.
+ *
+ * No patent licenses or other rights except those expressly stated in
+ * the OpenSSL open source license shall be deemed granted or received
+ * expressly, by implication, estoppel, or otherwise.
+ *
+ * No assurances are provided by Nokia that the Contribution does not
+ * infringe the patent or other intellectual property rights of any third
+ * party or that the license provides you with all the necessary rights
+ * to make use of the Contribution.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND. IN
+ * ADDITION TO THE DISCLAIMERS INCLUDED IN THE LICENSE, NOKIA
+ * SPECIFICALLY DISCLAIMS ANY LIABILITY FOR CLAIMS BROUGHT BY YOU OR ANY
+ * OTHER ENTITY BASED ON INFRINGEMENT OF INTELLECTUAL PROPERTY RIGHTS OR
+ * OTHERWISE.
+ */
 
 #include <stdio.h>
 #include <openssl/objects.h>
@@ -1149,6 +1175,64 @@
      SSL_ALL_STRENGTHS},
 #endif                          /* OPENSSL_NO_CAMELLIA */
 
+#ifndef OPENSSL_NO_PSK
+    /* Cipher 8A */
+    {
+    1,
+    TLS1_TXT_PSK_WITH_RC4_128_SHA,
+    TLS1_CK_PSK_WITH_RC4_128_SHA,
+    SSL_kPSK | SSL_aPSK | SSL_RC4 | SSL_SHA | SSL_TLSV1,
+    SSL_NOT_EXP | SSL_MEDIUM,
+    0,
+    128,
+    128,
+    SSL_ALL_CIPHERS,
+    SSL_ALL_STRENGTHS,
+    },
+
+    /* Cipher 8B */
+    {
+    1,
+    TLS1_TXT_PSK_WITH_3DES_EDE_CBC_SHA,
+    TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA,
+    SSL_kPSK | SSL_aPSK | SSL_3DES | SSL_SHA | SSL_TLSV1,
+    SSL_NOT_EXP | SSL_HIGH,
+    0,
+    168,
+    168,
+    SSL_ALL_CIPHERS,
+    SSL_ALL_STRENGTHS,
+    },
+
+    /* Cipher 8C */
+    {
+    1,
+    TLS1_TXT_PSK_WITH_AES_128_CBC_SHA,
+    TLS1_CK_PSK_WITH_AES_128_CBC_SHA,
+    SSL_kPSK | SSL_aPSK | SSL_AES | SSL_SHA | SSL_TLSV1,
+    SSL_NOT_EXP | SSL_MEDIUM,
+    0,
+    128,
+    128,
+    SSL_ALL_CIPHERS,
+    SSL_ALL_STRENGTHS,
+    },
+
+    /* Cipher 8D */
+    {
+    1,
+    TLS1_TXT_PSK_WITH_AES_256_CBC_SHA,
+    TLS1_CK_PSK_WITH_AES_256_CBC_SHA,
+    SSL_kPSK | SSL_aPSK | SSL_AES | SSL_SHA | SSL_TLSV1,
+    SSL_NOT_EXP | SSL_HIGH,
+    0,
+    256,
+    256,
+    SSL_ALL_CIPHERS,
+    SSL_ALL_STRENGTHS,
+    },
+#endif                          /* OPENSSL_NO_PSK */
+
 #ifndef OPENSSL_NO_SEED
     /* SEED ciphersuites from RFC4162 */
 
@@ -2353,6 +2437,11 @@
                 continue;
         }
 #endif                          /* OPENSSL_NO_KRB5 */
+#ifndef OPENSSL_NO_PSK
+        /* with PSK there must be server callback set */
+        if ((alg & SSL_PSK) && s->psk_server_callback == NULL)
+            continue;
+#endif /* OPENSSL_NO_PSK */
         if (SSL_C_IS_EXPORT(c)) {
             ok = ((alg & emask) == alg) ? 1 : 0;
 #ifdef CIPHER_DEBUG
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' openssl-0.9.8zf~/ssl/s3_srvr.c openssl-0.9.8zf/ssl/s3_srvr.c
--- openssl-0.9.8zf~/ssl/s3_srvr.c	2015-03-19 15:46:46.000000000 +0200
+++ openssl-0.9.8zf/ssl/s3_srvr.c	2015-03-19 22:20:05.072157060 +0200
@@ -121,6 +121,32 @@
  * Vipul Gupta and Sumit Gupta of Sun Microsystems Laboratories.
  *
  */
+/* ====================================================================
+ * Copyright 2005 Nokia. All rights reserved.
+ *
+ * The portions of the attached software ("Contribution") is developed by
+ * Nokia Corporation and is licensed pursuant to the OpenSSL open source
+ * license.
+ *
+ * The Contribution, originally written by Mika Kousa and Pasi Eronen of
+ * Nokia Corporation, consists of the "PSK" (Pre-Shared Key) ciphersuites
+ * support (see draft-ietf-tls-psk-09) to OpenSSL.
+ *
+ * No patent licenses or other rights except those expressly stated in
+ * the OpenSSL open source license shall be deemed granted or received
+ * expressly, by implication, estoppel, or otherwise.
+ *
+ * No assurances are provided by Nokia that the Contribution does not
+ * infringe the patent or other intellectual property rights of any third
+ * party or that the license provides you with all the necessary rights
+ * to make use of the Contribution.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND. IN
+ * ADDITION TO THE DISCLAIMERS INCLUDED IN THE LICENSE, NOKIA
+ * SPECIFICALLY DISCLAIMS ANY LIABILITY FOR CLAIMS BROUGHT BY YOU OR ANY
+ * OTHER ENTITY BASED ON INFRINGEMENT OF INTELLECTUAL PROPERTY RIGHTS OR
+ * OTHERWISE.
+ */
 
 #define REUSE_CIPHER_BUG
 #define NETSCAPE_HANG_BUG
@@ -321,7 +347,9 @@
         case SSL3_ST_SW_CERT_A:
         case SSL3_ST_SW_CERT_B:
             /* Check if it is anon DH or anon ECDH or KRB5 */
+            /* or normal PSK*/
             if (!(s->s3->tmp.new_cipher->algorithms & SSL_aNULL)
+                && !(s->s3->tmp.new_cipher->algorithms & SSL_kPSK)
                 && !(s->s3->tmp.new_cipher->algorithms & SSL_aKRB5)) {
                 ret = ssl3_send_server_certificate(s);
                 if (ret <= 0)
@@ -359,8 +387,14 @@
              * serverKeyExchange message only if the cipher suite is either
              * ECDH-anon or ECDHE. In other cases, the server certificate
              * contains the server's public key for key exchange.
+             * PSK: may send PSK identity hints
              */
             if ((l & SSL_kECDHE)
+            /* PSK: send ServerKeyExchange if PSK identity
+             * hint if provided */
+#ifndef OPENSSL_NO_PSK
+                || ((l & SSL_kPSK) && s->ctx->psk_identity_hint)
+#endif
                 || (l & (SSL_DH | SSL_kFZA))
                 || ((l & SSL_kRSA)
                     && (s->cert->pkeys[SSL_PKEY_RSA_ENC].privatekey == NULL
@@ -407,7 +441,10 @@
                    /*
                     * never request cert in Kerberos ciphersuites
                     */
-                   (s->s3->tmp.new_cipher->algorithms & SSL_aKRB5)) {
+                   (s->s3->tmp.new_cipher->algorithms & SSL_aKRB5) ||
+                   /* With normal PSK Certificates and
+                    * Certificate Requests are omitted */
+                   (s->s3->tmp.new_cipher->algorithms & SSL_kPSK)) {
                 /* no cert request */
                 skip = 1;
                 s->s3->tmp.cert_request = 0;
@@ -1485,6 +1522,13 @@
             r[3] = NULL;
         } else
 #endif                          /* !OPENSSL_NO_ECDH */
+#ifndef OPENSSL_NO_PSK
+        if (type & SSL_kPSK) {
+            /* reserve size for record length and PSK identity hint */
+            n += 2 + strlen(s->ctx->psk_identity_hint);
+        }
+        else
+#endif                          /* !OPENSSL_NO_PSK */
         {
             al = SSL_AD_HANDSHAKE_FAILURE;
             SSLerr(SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE,
@@ -1495,8 +1539,8 @@
             nr[i] = BN_num_bytes(r[i]);
             n += 2 + nr[i];
         }
-
-        if (!(s->s3->tmp.new_cipher->algorithms & SSL_aNULL)) {
+        if (!(s->s3->tmp.new_cipher->algorithms & SSL_aNULL)
+            && !(s->s3->tmp.new_cipher->algorithms & SSL_kPSK)) {
             if ((pkey = ssl_get_sign_pkey(s, s->s3->tmp.new_cipher))
                 == NULL) {
                 al = SSL_AD_DECODE_ERROR;
@@ -1545,6 +1589,15 @@
         }
 #endif
 
+#ifndef OPENSSL_NO_PSK
+        if (type & SSL_kPSK) {
+            /* copy PSK identity hint */
+            s2n(strlen(s->ctx->psk_identity_hint), p); 
+            strncpy(p, s->ctx->psk_identity_hint, strlen(s->ctx->psk_identity_hint));
+            p += strlen(s->ctx->psk_identity_hint);
+        }
+#endif
+
         /* not anonymous */
         if (pkey != NULL) {
             /*
@@ -2265,6 +2318,95 @@
         return (ret);
     } else
 #endif
+
+#ifndef OPENSSL_NO_PSK
+    if (l & SSL_kPSK) {
+        unsigned char *t = NULL;
+        unsigned char psk_or_pre_ms[PSK_MAX_PSK_LEN * 2 + 4];
+        unsigned int pre_ms_len = 0, psk_len = 0;
+        int psk_err = 1;
+        char tmp_id[PSK_MAX_IDENTITY_LEN + 1];
+
+        al=SSL_AD_HANDSHAKE_FAILURE;
+
+        n2s(p,i);
+        if (n != i + 2) {
+            SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,
+                   SSL_R_LENGTH_MISMATCH);
+            goto psk_err;
+            }
+        if (i > PSK_MAX_IDENTITY_LEN) {
+            SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,
+                   SSL_R_DATA_LENGTH_TOO_LONG);
+            goto psk_err;
+        }
+        if (s->psk_server_callback == NULL) {
+            SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,
+                   SSL_R_PSK_NO_SERVER_CB);
+            goto psk_err;
+        }
+
+        /* Create guaranteed NULL-terminated identity
+         * string for the callback */
+        memcpy(tmp_id, p, i);
+        memset(tmp_id + i, 0, PSK_MAX_IDENTITY_LEN + 1 - i);
+        psk_len = s->psk_server_callback(s, tmp_id, psk_or_pre_ms,
+                                         sizeof(psk_or_pre_ms));
+        OPENSSL_cleanse(tmp_id, PSK_MAX_IDENTITY_LEN + 1);
+
+        if (psk_len > PSK_MAX_PSK_LEN) {
+            SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,
+                   ERR_R_INTERNAL_ERROR);
+            goto psk_err;
+        } else if (psk_len == 0) {
+            /* PSK related to the given identity not found */
+            SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,
+                   SSL_R_PSK_IDENTITY_NOT_FOUND);
+            al = SSL_AD_UNKNOWN_PSK_IDENTITY;
+            goto psk_err;
+        }
+
+        /* create PSK pre_master_secret */
+        pre_ms_len = 2 + psk_len + 2 + psk_len;
+        t = psk_or_pre_ms;
+        memmove(psk_or_pre_ms+psk_len + 4, psk_or_pre_ms, psk_len);
+        s2n(psk_len, t);
+        memset(t, 0, psk_len);
+        t += psk_len;
+        s2n(psk_len, t);
+
+        if (s->session->psk_identity != NULL)
+            OPENSSL_free(s->session->psk_identity);
+        s->session->psk_identity = BUF_strdup(p);
+        if (s->session->psk_identity == NULL) {
+            SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,
+                   ERR_R_MALLOC_FAILURE);
+            goto psk_err;
+        }
+
+        if (s->session->psk_identity_hint != NULL)
+            OPENSSL_free(s->session->psk_identity_hint);
+        s->session->psk_identity_hint = BUF_strdup(s->ctx->psk_identity_hint);
+        if (s->ctx->psk_identity_hint != NULL &&
+            s->session->psk_identity_hint == NULL) {
+            SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE,
+                   ERR_R_MALLOC_FAILURE);
+            goto psk_err;
+        }
+
+        s->session->master_key_length =
+            s->method->ssl3_enc->generate_master_secret(s,
+                                                        s->session->master_key,
+                                                        psk_or_pre_ms,
+                                                        pre_ms_len);
+        psk_err = 0;
+  psk_err:
+        OPENSSL_cleanse(psk_or_pre_ms, sizeof(psk_or_pre_ms));
+        if (psk_err != 0)
+            goto f_err;
+    }
+        else
+#endif
     {
         al = SSL_AD_HANDSHAKE_FAILURE;
         SSLerr(SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE, SSL_R_UNKNOWN_CIPHER_TYPE);
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' openssl-0.9.8zf~/ssl/ssl.h openssl-0.9.8zf/ssl/ssl.h
--- openssl-0.9.8zf~/ssl/ssl.h	2015-03-19 15:46:46.000000000 +0200
+++ openssl-0.9.8zf/ssl/ssl.h	2015-03-19 22:29:16.120166365 +0200
@@ -166,6 +166,32 @@
  * ECC cipher suite support in OpenSSL originally developed by
  * SUN MICROSYSTEMS, INC., and contributed to the OpenSSL project.
  */
+/* ====================================================================
+ * Copyright 2005 Nokia. All rights reserved.
+ *
+ * The portions of the attached software ("Contribution") is developed by
+ * Nokia Corporation and is licensed pursuant to the OpenSSL open source
+ * license.
+ *
+ * The Contribution, originally written by Mika Kousa and Pasi Eronen of
+ * Nokia Corporation, consists of the "PSK" (Pre-Shared Key) ciphersuites
+ * support (see draft-ietf-tls-psk-09) to OpenSSL.
+ *
+ * No patent licenses or other rights except those expressly stated in
+ * the OpenSSL open source license shall be deemed granted or received
+ * expressly, by implication, estoppel, or otherwise.
+ *
+ * No assurances are provided by Nokia that the Contribution does not
+ * infringe the patent or other intellectual property rights of any third
+ * party or that the license provides you with all the necessary rights
+ * to make use of the Contribution.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND. IN
+ * ADDITION TO THE DISCLAIMERS INCLUDED IN THE LICENSE, NOKIA
+ * SPECIFICALLY DISCLAIMS ANY LIABILITY FOR CLAIMS BROUGHT BY YOU OR ANY
+ * OTHER ENTITY BASED ON INFRINGEMENT OF INTELLECTUAL PROPERTY RIGHTS OR
+ * OTHERWISE.
+ */
 
 #ifndef HEADER_SSL_H
 # define HEADER_SSL_H
@@ -301,7 +327,10 @@
 # define SSL_TXT_ALL             "ALL"
 # define SSL_TXT_ECC             "ECCdraft"/* ECC ciphersuites are not yet
                                             * official */
-
+#define SSL_TXT_PSK             "PSK"
+#define SSL_TXT_kPSK            "kPSK"
+#define SSL_TXT_aPSK            "aPSK"
+
 /*-
  * COMPLEMENTOF* definitions. These identifiers are used to (de-select)
  * ciphers normally not being used.
@@ -415,8 +444,9 @@
  *      Timeout [ 2 ] EXPLICIT  INTEGER,        -- optional Timeout ins seconds
  *      Peer [ 3 ] EXPLICIT     X509,           -- optional Peer Certificate
  *      Session_ID_context [ 4 ] EXPLICIT OCTET_STRING,   -- the Session ID context
- *      Verify_result [ 5 ] EXPLICIT INTEGER    -- X509_V_... code for `Peer'
- *      Compression [6] IMPLICIT ASN1_OBJECT    -- compression OID XXXXX
+ *      Verify_result [ 5 ] EXPLICIT INTEGER,   -- X509_V_... code for `Peer'
+ *      PSK_identity_hint [ 6 ] EXPLICIT OCTET_STRING, -- PSK identity hint
+ *      PSK_identity [ 7 ] EXPLICIT OCTET_STRING -- PSK identity
  *      }
  * Look in ssl/ssl_asn1.c for more details
  * I'm using EXPLICIT tags so I can read the damn things using asn1parse :-).
@@ -443,6 +473,10 @@
     unsigned int krb5_client_princ_len;
     unsigned char krb5_client_princ[SSL_MAX_KRB5_PRINCIPAL_LENGTH];
 # endif                         /* OPENSSL_NO_KRB5 */
+#ifndef OPENSSL_NO_PSK
+    char *psk_identity_hint;
+    char *psk_identity;
+#endif
     int not_resumable;
     /* The cert is the certificate used to establish this connection */
     struct sess_cert_st /* SESS_CERT */ *sess_cert;
@@ -834,6 +868,15 @@
     void *tlsext_status_arg;
 # endif
 
+#ifndef OPENSSL_NO_PSK
+    char *psk_identity_hint;
+    unsigned int (*psk_client_callback)(SSL *ssl, const char *hint, char *identity,
+        unsigned int max_identity_len, unsigned char *psk,
+        unsigned int max_psk_len);
+    unsigned int (*psk_server_callback)(SSL *ssl, const char *identity,
+        unsigned char *psk, unsigned int max_psk_len);
+#endif
+
 };
 
 # define SSL_SESS_CACHE_OFF                      0x0000
@@ -919,6 +962,20 @@
                                                                *cookie,
                                                                unsigned int
                                                                cookie_len));
+#ifndef OPENSSL_NO_PSK
+/* the maximum length of the buffer given to callbacks containing the
+ * resulting identity/psk */
+#define PSK_MAX_IDENTITY_LEN 128
+#define PSK_MAX_PSK_LEN 64
+#define SSL_CTX_set_psk_client_callback(ctx,cb) ((ctx)->psk_client_callback=(cb))
+#define SSL_set_psk_client_callback(ssl, cb) ((ssl)->psk_client_callback=(cb))
+#define SSL_CTX_set_psk_server_callback(ctx,cb) ((ctx)->psk_server_callback=(cb))
+#define SSL_set_psk_server_callback(ssl, cb) ((ssl)->psk_server_callback=(cb))
+int SSL_CTX_use_psk_identity_hint(SSL_CTX *ctx, const char *identity_hint);
+int SSL_use_psk_identity_hint(SSL *s, const char *identity_hint);
+const char *SSL_get_psk_identity_hint(SSL *s);
+const char *SSL_get_psk_identity(SSL *s);
+#endif
 
 # define SSL_NOTHING     1
 # define SSL_WRITING     2
@@ -1070,6 +1127,13 @@
     /* Kerberos 5 context */
     KSSL_CTX *kssl_ctx;
 # endif                         /* OPENSSL_NO_KRB5 */
+#ifndef OPENSSL_NO_PSK
+    unsigned int (*psk_client_callback)(SSL *ssl, const char *hint, char *identity,
+        unsigned int max_identity_len, unsigned char *psk,
+        unsigned int max_psk_len);
+    unsigned int (*psk_server_callback)(SSL *ssl, const char *identity,
+        unsigned char *psk, unsigned int max_psk_len);
+#endif
     SSL_CTX *ctx;
     /*
      * set this flag to 1 and a sleep(1) is put into all SSL_read() and
@@ -1289,6 +1353,7 @@
 # define SSL_AD_UNSUPPORTED_EXTENSION    TLS1_AD_UNSUPPORTED_EXTENSION
 # define SSL_AD_CERTIFICATE_UNOBTAINABLE TLS1_AD_CERTIFICATE_UNOBTAINABLE
 # define SSL_AD_UNRECOGNIZED_NAME        TLS1_AD_UNRECOGNIZED_NAME
+# define SSL_AD_UNKNOWN_PSK_IDENTITY     TLS1_AD_UNKNOWN_PSK_IDENTITY /* fatal */
 # define SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE
 # define SSL_AD_BAD_CERTIFICATE_HASH_VALUE TLS1_AD_BAD_CERTIFICATE_HASH_VALUE
 /* fatal */
@@ -1923,6 +1988,7 @@
 # define SSL_F_SSL_CTX_USE_PRIVATEKEY                     174
 # define SSL_F_SSL_CTX_USE_PRIVATEKEY_ASN1                175
 # define SSL_F_SSL_CTX_USE_PRIVATEKEY_FILE                176
+# define SSL_F_SSL_CTX_USE_PSK_IDENTITY_HINT              400
 # define SSL_F_SSL_CTX_USE_RSAPRIVATEKEY                  177
 # define SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_ASN1             178
 # define SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_FILE             179
@@ -1968,6 +2034,7 @@
 # define SSL_F_SSL_USE_PRIVATEKEY                         201
 # define SSL_F_SSL_USE_PRIVATEKEY_ASN1                    202
 # define SSL_F_SSL_USE_PRIVATEKEY_FILE                    203
+# define SSL_F_SSL_USE_PSK_IDENTITY_HINT                  401
 # define SSL_F_SSL_USE_RSAPRIVATEKEY                      204
 # define SSL_F_SSL_USE_RSAPRIVATEKEY_ASN1                 205
 # define SSL_F_SSL_USE_RSAPRIVATEKEY_FILE                 206
@@ -2001,6 +2068,7 @@
 # define SSL_R_BAD_MESSAGE_TYPE                           114
 # define SSL_R_BAD_PACKET_LENGTH                          115
 # define SSL_R_BAD_PROTOCOL_VERSION_NUMBER                116
+# define SSL_R_BAD_PSK_IDENTITY_HINT_LENGTH               2003
 # define SSL_R_BAD_RESPONSE_ARGUMENT                      117
 # define SSL_R_BAD_RSA_DECRYPT                            118
 # define SSL_R_BAD_RSA_ENCRYPT                            119
@@ -2127,6 +2195,9 @@
 # define SSL_R_PRE_MAC_LENGTH_TOO_LONG                    205
 # define SSL_R_PROBLEMS_MAPPING_CIPHER_FUNCTIONS          206
 # define SSL_R_PROTOCOL_IS_SHUTDOWN                       207
+# define SSL_R_PSK_IDENTITY_NOT_FOUND                     350
+# define SSL_R_PSK_NO_CLIENT_CB                           351
+# define SSL_R_PSK_NO_SERVER_CB                           352
 # define SSL_R_PUBLIC_KEY_ENCRYPT_ERROR                   208
 # define SSL_R_PUBLIC_KEY_IS_NOT_RSA                      209
 # define SSL_R_PUBLIC_KEY_NOT_RSA                         210
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' openssl-0.9.8zf~/ssl/ssl_asn1.c openssl-0.9.8zf/ssl/ssl_asn1.c
--- openssl-0.9.8zf~/ssl/ssl_asn1.c	2015-03-19 15:46:46.000000000 +0200
+++ openssl-0.9.8zf/ssl/ssl_asn1.c	2015-03-19 22:41:41.920178957 +0200
@@ -55,6 +55,32 @@
  * copied and put under another distribution licence
  * [including the GNU Public Licence.]
  */
+/* ====================================================================
+ * Copyright 2005 Nokia. All rights reserved.
+ *
+ * The portions of the attached software ("Contribution") is developed by
+ * Nokia Corporation and is licensed pursuant to the OpenSSL open source
+ * license.
+ *
+ * The Contribution, originally written by Mika Kousa and Pasi Eronen of
+ * Nokia Corporation, consists of the "PSK" (Pre-Shared Key) ciphersuites
+ * support (see draft-ietf-tls-psk-09) to OpenSSL.
+ *
+ * No patent licenses or other rights except those expressly stated in
+ * the OpenSSL open source license shall be deemed granted or received
+ * expressly, by implication, estoppel, or otherwise.
+ *
+ * No assurances are provided by Nokia that the Contribution does not
+ * infringe the patent or other intellectual property rights of any third
+ * party or that the license provides you with all the necessary rights
+ * to make use of the Contribution.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND. IN
+ * ADDITION TO THE DISCLAIMERS INCLUDED IN THE LICENSE, NOKIA
+ * SPECIFICALLY DISCLAIMS ANY LIABILITY FOR CLAIMS BROUGHT BY YOU OR ANY
+ * OTHER ENTITY BASED ON INFRINGEMENT OF INTELLECTUAL PROPERTY RIGHTS OR
+ * OTHERWISE.
+ */
 
 #include <stdio.h>
 #include <stdlib.h>
@@ -83,12 +109,16 @@
     ASN1_INTEGER tlsext_tick_lifetime;
     ASN1_OCTET_STRING tlsext_tick;
 #endif                          /* OPENSSL_NO_TLSEXT */
+#ifndef OPENSSL_NO_PSK
+    ASN1_OCTET_STRING psk_identity_hint;
+    ASN1_OCTET_STRING psk_identity;
+#endif                          /* OPENSSL_NO_PSK */
 } SSL_SESSION_ASN1;
 
 int i2d_SSL_SESSION(SSL_SESSION *in, unsigned char **pp)
 {
 #define LSIZE2 (sizeof(long)*2)
-    int v1 = 0, v2 = 0, v3 = 0, v4 = 0, v5 = 0;
+    int v1 = 0, v2 = 0, v3 = 0, v4 = 0, v5 = 0, v7 = 0, v8 = 0;
     unsigned char buf[4], ibuf1[LSIZE2], ibuf2[LSIZE2];
     unsigned char ibuf3[LSIZE2], ibuf4[LSIZE2], ibuf5[LSIZE2];
 #ifndef OPENSSL_NO_TLSEXT
@@ -212,6 +242,18 @@
                          in->tlsext_tick_lifetime_hint);
     }
 #endif                          /* OPENSSL_NO_TLSEXT */
+#ifndef OPENSSL_NO_PSK
+    if (in->psk_identity_hint) {
+        a.psk_identity_hint.length = strlen(in->psk_identity_hint);
+        a.psk_identity_hint.type = V_ASN1_OCTET_STRING;
+        a.psk_identity_hint.data = in->psk_identity_hint;
+    }
+    if (in->psk_identity) {
+        a.psk_identity.length = strlen(in->psk_identity);
+        a.psk_identity.type = V_ASN1_OCTET_STRING;
+        a.psk_identity.data = in->psk_identity;
+    }
+#endif                          /* OPENSSL_NO_PSK */
     M_ASN1_I2D_len(&(a.version), i2d_ASN1_INTEGER);
     M_ASN1_I2D_len(&(a.ssl_version), i2d_ASN1_INTEGER);
     M_ASN1_I2D_len(&(a.cipher), i2d_ASN1_OCTET_STRING);
@@ -249,6 +291,14 @@
         M_ASN1_I2D_len_EXP_opt(&(a.comp_id), i2d_ASN1_OCTET_STRING, 11, v11);
 # endif
 #endif                          /* OPENSSL_NO_TLSEXT */
+#ifndef OPENSSL_NO_PSK
+    if (in->psk_identity_hint)
+        M_ASN1_I2D_len_EXP_opt(&(a.psk_identity_hint), i2d_ASN1_OCTET_STRING,
+                               7, v7);
+    if (in->psk_identity)
+        M_ASN1_I2D_len_EXP_opt(&(a.psk_identity), i2d_ASN1_OCTET_STRING, 8,
+                               v8);
+#endif                          /* OPENSSL_NO_PSK */
     M_ASN1_I2D_seq_total();
 
     M_ASN1_I2D_put(&(a.version), i2d_ASN1_INTEGER);
@@ -276,6 +326,16 @@
     if (in->tlsext_hostname)
         M_ASN1_I2D_put_EXP_opt(&(a.tlsext_hostname), i2d_ASN1_OCTET_STRING, 6,
                                v6);
+#endif                          /* OPENSSL_NO_TLSEXT */
+#ifndef OPENSSL_NO_PSK
+    if (in->psk_identity_hint)
+        M_ASN1_I2D_put_EXP_opt(&(a.psk_identity_hint), i2d_ASN1_OCTET_STRING,
+                               7, v7);
+    if (in->psk_identity)
+        M_ASN1_I2D_put_EXP_opt(&(a.psk_identity), i2d_ASN1_OCTET_STRING, 8,
+                               v8);
+#endif                          /* OPENSSL_NO_PSK */
+#ifndef OPENSSL_NO_TLSEXT
     if (in->tlsext_tick_lifetime_hint > 0)
         M_ASN1_I2D_put_EXP_opt(&a.tlsext_tick_lifetime, i2d_ASN1_INTEGER, 9,
                                v9);
@@ -465,6 +525,23 @@
         os.length = 0;
     } else
         ret->tlsext_hostname = NULL;
+#endif                          /* OPENSSL_NO_TLSEXT */
+
+#ifndef OPENSSL_NO_PSK
+    os.length = 0;
+    os.data = NULL;
+    M_ASN1_D2I_get_EXP_opt(osp,d2i_ASN1_OCTET_STRING, 6);
+    if (os.data) {
+        ret->psk_identity_hint = BUF_strndup(os.data, os.length);
+        OPENSSL_free(os.data);
+        os.data = NULL;
+        os.length = 0;
+    }
+    else
+        ret->psk_identity_hint = NULL;
+#endif /* OPENSSL_NO_PSK */
+
+#ifndef OPENSSL_NO_TLSEXT
     ai.length = 0;
     M_ASN1_D2I_get_EXP_opt(aip, d2i_ASN1_INTEGER, 9);
     if (ai.data != NULL) {
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' openssl-0.9.8zf~/ssl/ssl_ciph.c openssl-0.9.8zf/ssl/ssl_ciph.c
--- openssl-0.9.8zf~/ssl/ssl_ciph.c	2015-03-19 15:46:46.000000000 +0200
+++ openssl-0.9.8zf/ssl/ssl_ciph.c	2015-03-19 22:47:26.344184773 +0200
@@ -113,6 +113,33 @@
  * ECC cipher suite support in OpenSSL originally developed by
  * SUN MICROSYSTEMS, INC., and contributed to the OpenSSL project.
  */
+/* ====================================================================
+ * Copyright 2005 Nokia. All rights reserved.
+ *
+ * The portions of the attached software ("Contribution") is developed by
+ * Nokia Corporation and is licensed pursuant to the OpenSSL open source
+ * license.
+ *
+ * The Contribution, originally written by Mika Kousa and Pasi Eronen of
+ * Nokia Corporation, consists of the "PSK" (Pre-Shared Key) ciphersuites
+ * support (see draft-ietf-tls-psk-09) to OpenSSL.
+ *
+ * No patent licenses or other rights except those expressly stated in
+ * the OpenSSL open source license shall be deemed granted or received
+ * expressly, by implication, estoppel, or otherwise.
+ *
+ * No assurances are provided by Nokia that the Contribution does not
+ * infringe the patent or other intellectual property rights of any third
+ * party or that the license provides you with all the necessary rights
+ * to make use of the Contribution.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND. IN
+ * ADDITION TO THE DISCLAIMERS INCLUDED IN THE LICENSE, NOKIA
+ * SPECIFICALLY DISCLAIMS ANY LIABILITY FOR CLAIMS BROUGHT BY YOU OR ANY
+ * OTHER ENTITY BASED ON INFRINGEMENT OF INTELLECTUAL PROPERTY RIGHTS OR
+ * OTHERWISE.
+ */
+
 #include <stdio.h>
 #include <openssl/objects.h>
 #ifndef OPENSSL_NO_COMP
@@ -186,6 +213,7 @@
     {0, SSL_TXT_kDHd, 0, SSL_kDHd, 0, 0, 0, 0, SSL_MKEY_MASK, 0},
     {0, SSL_TXT_kEDH, 0, SSL_kEDH, 0, 0, 0, 0, SSL_MKEY_MASK, 0},
     {0, SSL_TXT_kFZA, 0, SSL_kFZA, 0, 0, 0, 0, SSL_MKEY_MASK, 0},
+    {0, SSL_TXT_kPSK, 0, SSL_kPSK, 0, 0, 0, 0, SSL_MKEY_MASK, 0},
     {0, SSL_TXT_DH, 0, SSL_DH, 0, 0, 0, 0, SSL_MKEY_MASK, 0},
     {0, SSL_TXT_ECC, 0, (SSL_kECDH | SSL_kECDHE), 0, 0, 0, 0, SSL_MKEY_MASK,
      0},
@@ -196,6 +224,7 @@
     {0, SSL_TXT_aRSA, 0, SSL_aRSA, 0, 0, 0, 0, SSL_AUTH_MASK, 0},
     {0, SSL_TXT_aDSS, 0, SSL_aDSS, 0, 0, 0, 0, SSL_AUTH_MASK, 0},
     {0, SSL_TXT_aFZA, 0, SSL_aFZA, 0, 0, 0, 0, SSL_AUTH_MASK, 0},
+    {0, SSL_TXT_aPSK, 0, SSL_aPSK, 0, 0, 0, 0, SSL_AUTH_MASK, 0},
     {0, SSL_TXT_aNULL, 0, SSL_aNULL, 0, 0, 0, 0, SSL_AUTH_MASK, 0},
     {0, SSL_TXT_aDH, 0, SSL_aDH, 0, 0, 0, 0, SSL_AUTH_MASK, 0},
     {0, SSL_TXT_DSS, 0, SSL_DSS, 0, 0, 0, 0, SSL_AUTH_MASK, 0},
@@ -226,6 +255,8 @@
      0},
     {0, SSL_TXT_FZA, 0, SSL_FZA, 0, 0, 0, 0,
      SSL_AUTH_MASK | SSL_MKEY_MASK | SSL_ENC_MASK, 0},
+    {0, SSL_TXT_PSK, 0, SSL_PSK, 0, 0, 0, 0, 
+     SSL_AUTH_MASK | SSL_MKEY_MASK, 0},
 
     {0, SSL_TXT_SSLV2, 0, SSL_SSLV2, 0, 0, 0, 0, SSL_SSL_MASK, 0},
     {0, SSL_TXT_SSLV3, 0, SSL_SSLV3, 0, 0, 0, 0, SSL_SSL_MASK, 0},
@@ -477,6 +508,9 @@
 #ifdef OPENSSL_NO_ECDH
     mask |= SSL_kECDH | SSL_kECDHE;
 #endif
+#ifdef OPENSSL_NO_PSK
+    mask |= SSL_kPSK;
+#endif
 #ifdef SSL_FORBID_ENULL
     mask |= SSL_eNULL;
 #endif
@@ -1153,6 +1187,9 @@
     case SSL_kECDHE:
         kx = is_export ? "ECDH(<=163)" : "ECDH";
         break;
+    case SSL_kPSK:
+        kx = "PSK";
+        break;
     default:
         kx = "unknown";
     }
@@ -1178,6 +1215,9 @@
     case SSL_aECDSA:
         au = "ECDSA";
         break;
+    case SSL_aPSK:
+        au = "PSK";
+        break;
     default:
         au = "unknown";
         break;
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' openssl-0.9.8zf~/ssl/ssl_err.c openssl-0.9.8zf/ssl/ssl_err.c
--- openssl-0.9.8zf~/ssl/ssl_err.c	2015-03-19 15:46:46.000000000 +0200
+++ openssl-0.9.8zf/ssl/ssl_err.c	2015-03-19 22:52:21.344189754 +0200
@@ -58,6 +58,32 @@
  * made to it will be overwritten when the script next updates this file,
  * only reason strings will be preserved.
  */
+/* ====================================================================
+ * Copyright 2005 Nokia. All rights reserved.
+ *
+ * The portions of the attached software ("Contribution") is developed by
+ * Nokia Corporation and is licensed pursuant to the OpenSSL open source
+ * license.
+ *
+ * The Contribution, originally written by Mika Kousa and Pasi Eronen of
+ * Nokia Corporation, consists of the "PSK" (Pre-Shared Key) ciphersuites
+ * support (see draft-ietf-tls-psk-09) to OpenSSL.
+ *
+ * No patent licenses or other rights except those expressly stated in
+ * the OpenSSL open source license shall be deemed granted or received
+ * expressly, by implication, estoppel, or otherwise.
+ *
+ * No assurances are provided by Nokia that the Contribution does not
+ * infringe the patent or other intellectual property rights of any third
+ * party or that the license provides you with all the necessary rights
+ * to make use of the Contribution.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND. IN
+ * ADDITION TO THE DISCLAIMERS INCLUDED IN THE LICENSE, NOKIA
+ * SPECIFICALLY DISCLAIMS ANY LIABILITY FOR CLAIMS BROUGHT BY YOU OR ANY
+ * OTHER ENTITY BASED ON INFRINGEMENT OF INTELLECTUAL PROPERTY RIGHTS OR
+ * OTHERWISE.
+ */
 
 #include <stdio.h>
 #include <openssl/err.h>
@@ -249,6 +275,8 @@
      "SSL_CTX_use_PrivateKey_ASN1"},
     {ERR_FUNC(SSL_F_SSL_CTX_USE_PRIVATEKEY_FILE),
      "SSL_CTX_use_PrivateKey_file"},
+    {ERR_FUNC(SSL_F_SSL_CTX_USE_PSK_IDENTITY_HINT),
+     "SSL_CTX_use_psk_identity_hint"},
     {ERR_FUNC(SSL_F_SSL_CTX_USE_RSAPRIVATEKEY), "SSL_CTX_use_RSAPrivateKey"},
     {ERR_FUNC(SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_ASN1),
      "SSL_CTX_use_RSAPrivateKey_ASN1"},
@@ -305,6 +333,7 @@
     {ERR_FUNC(SSL_F_SSL_USE_PRIVATEKEY), "SSL_use_PrivateKey"},
     {ERR_FUNC(SSL_F_SSL_USE_PRIVATEKEY_ASN1), "SSL_use_PrivateKey_ASN1"},
     {ERR_FUNC(SSL_F_SSL_USE_PRIVATEKEY_FILE), "SSL_use_PrivateKey_file"},
+    {ERR_FUNC(SSL_F_SSL_USE_PSK_IDENTITY_HINT), "SSL_use_psk_identity_hint"},
     {ERR_FUNC(SSL_F_SSL_USE_RSAPRIVATEKEY), "SSL_use_RSAPrivateKey"},
     {ERR_FUNC(SSL_F_SSL_USE_RSAPRIVATEKEY_ASN1),
      "SSL_use_RSAPrivateKey_ASN1"},
@@ -345,6 +374,8 @@
     {ERR_REASON(SSL_R_BAD_PACKET_LENGTH), "bad packet length"},
     {ERR_REASON(SSL_R_BAD_PROTOCOL_VERSION_NUMBER),
      "bad protocol version number"},
+    {ERR_REASON(SSL_R_BAD_PSK_IDENTITY_HINT_LENGTH),
+     "bad psk identity hint length"},
     {ERR_REASON(SSL_R_BAD_RESPONSE_ARGUMENT), "bad response argument"},
     {ERR_REASON(SSL_R_BAD_RSA_DECRYPT), "bad rsa decrypt"},
     {ERR_REASON(SSL_R_BAD_RSA_ENCRYPT), "bad rsa encrypt"},
@@ -496,6 +527,9 @@
     {ERR_REASON(SSL_R_PROBLEMS_MAPPING_CIPHER_FUNCTIONS),
      "problems mapping cipher functions"},
     {ERR_REASON(SSL_R_PROTOCOL_IS_SHUTDOWN), "protocol is shutdown"},
+    {ERR_REASON(SSL_R_PSK_IDENTITY_NOT_FOUND), "identity not found"},
+    {ERR_REASON(SSL_R_PSK_NO_CLIENT_CB), "PSK client callback not set"},
+    {ERR_REASON(SSL_R_PSK_NO_SERVER_CB), "PSK server callback not set"},
     {ERR_REASON(SSL_R_PUBLIC_KEY_ENCRYPT_ERROR), "public key encrypt error"},
     {ERR_REASON(SSL_R_PUBLIC_KEY_IS_NOT_RSA), "public key is not rsa"},
     {ERR_REASON(SSL_R_PUBLIC_KEY_NOT_RSA), "public key not rsa"},
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' openssl-0.9.8zf~/ssl/ssl_lib.c openssl-0.9.8zf/ssl/ssl_lib.c
--- openssl-0.9.8zf~/ssl/ssl_lib.c	2015-03-19 15:46:46.000000000 +0200
+++ openssl-0.9.8zf/ssl/ssl_lib.c	2015-03-19 23:00:12.008197701 +0200
@@ -115,6 +115,32 @@
  * ECC cipher suite support in OpenSSL originally developed by
  * SUN MICROSYSTEMS, INC., and contributed to the OpenSSL project.
  */
+/* ====================================================================
+ * Copyright 2005 Nokia. All rights reserved.
+ *
+ * The portions of the attached software ("Contribution") is developed by
+ * Nokia Corporation and is licensed pursuant to the OpenSSL open source
+ * license.
+ *
+ * The Contribution, originally written by Mika Kousa and Pasi Eronen of
+ * Nokia Corporation, consists of the "PSK" (Pre-Shared Key) ciphersuites
+ * support (see draft-ietf-tls-psk-09) to OpenSSL.
+ *
+ * No patent licenses or other rights except those expressly stated in
+ * the OpenSSL open source license shall be deemed granted or received
+ * expressly, by implication, estoppel, or otherwise.
+ *
+ * No assurances are provided by Nokia that the Contribution does not
+ * infringe the patent or other intellectual property rights of any third
+ * party or that the license provides you with all the necessary rights
+ * to make use of the Contribution.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND. IN
+ * ADDITION TO THE DISCLAIMERS INCLUDED IN THE LICENSE, NOKIA
+ * SPECIFICALLY DISCLAIMS ANY LIABILITY FOR CLAIMS BROUGHT BY YOU OR ANY
+ * OTHER ENTITY BASED ON INFRINGEMENT OF INTELLECTUAL PROPERTY RIGHTS OR
+ * OTHERWISE.
+ */
 
 #ifdef REF_CHECK
 # include <assert.h>
@@ -345,6 +371,11 @@
 
     CRYPTO_new_ex_data(CRYPTO_EX_INDEX_SSL, s, &s->ex_data);
 
+#ifndef OPENSSL_NO_PSK
+    s->psk_client_callback = ctx->psk_client_callback;
+    s->psk_server_callback = ctx->psk_server_callback;
+#endif
+
     return (s);
  err:
     if (s != NULL) {
@@ -1297,6 +1328,11 @@
         if ((c->algorithms & SSL_KRB5) && nokrb5)
             continue;
 #endif                          /* OPENSSL_NO_KRB5 */
+#ifndef OPENSSL_NO_PSK
+        /* with PSK there must be client callback set */
+        if ((c->algorithms & SSL_PSK) && s->psk_client_callback == NULL)
+            continue;
+#endif                          /* OPENSSL_NO_PSK */
 
         j = put_cb(c, p);
         p += j;
@@ -1635,6 +1671,12 @@
      */
     ret->options |= SSL_OP_LEGACY_SERVER_CONNECT;
 
+#ifndef OPENSSL_NO_PSK
+    ret->psk_identity_hint = NULL;
+    ret->psk_client_callback = NULL;
+    ret->psk_server_callback = NULL;
+#endif
+
     return (ret);
  err:
     SSLerr(SSL_F_SSL_CTX_NEW, ERR_R_MALLOC_FAILURE);
@@ -1714,6 +1756,10 @@
     if (a->client_cert_engine)
         ENGINE_finish(a->client_cert_engine);
 #endif
+#ifndef OPENSSL_NO_PSK
+    if (a->psk_identity_hint)
+        OPENSSL_free(a->psk_identity_hint);
+#endif
     OPENSSL_free(a);
 }
 
@@ -1904,6 +1950,10 @@
         emask |= SSL_kECDHE;
     }
 #endif
+#ifndef OPENSSL_NO_PSK
+    mask |= SSL_kPSK;
+    mask |= SSL_aPSK;
+#endif
     c->mask = mask;
     c->export_mask = emask;
     c->valid = 1;
@@ -2748,6 +2798,75 @@
 }
 #endif
 
+#ifndef OPENSSL_NO_PSK
+int SSL_CTX_use_psk_identity_hint(SSL_CTX *ctx, const char *identity_hint)
+{
+    if (identity_hint != NULL &&
+        strlen(identity_hint) > PSK_MAX_IDENTITY_LEN) {
+        SSLerr(SSL_F_SSL_CTX_USE_PSK_IDENTITY_HINT, 
+               SSL_R_DATA_LENGTH_TOO_LONG);
+
+        return 0;
+    }
+    if (ctx->psk_identity_hint != NULL)
+        OPENSSL_free(ctx->psk_identity_hint);
+    if (identity_hint != NULL) {
+        ctx->psk_identity_hint = BUF_strdup(identity_hint);
+        if (ctx->psk_identity_hint == NULL)
+            return 0;
+    }
+    else
+        ctx->psk_identity_hint = NULL;
+
+    return 1;
+}
+
+int SSL_use_psk_identity_hint(SSL *s, const char *identity_hint)
+{
+    if (s == NULL)
+        return 0;
+
+    if (s->session == NULL)
+        return 1; /* session not created yet, ignored */
+
+    if (identity_hint != NULL &&
+        strlen(identity_hint) > PSK_MAX_IDENTITY_LEN) {
+        SSLerr(SSL_F_SSL_USE_PSK_IDENTITY_HINT,
+               SSL_R_DATA_LENGTH_TOO_LONG);
+
+        return 0;
+    }
+    if (s->session->psk_identity_hint != NULL)
+        OPENSSL_free(s->session->psk_identity_hint);
+    if (identity_hint != NULL)
+    {
+        s->session->psk_identity_hint = BUF_strdup(identity_hint);
+        if (s->session->psk_identity_hint == NULL)
+            return 0;
+    }
+    else
+        s->session->psk_identity_hint = NULL;
+
+    return 1;
+}
+
+const char *SSL_get_psk_identity_hint(SSL *s)
+{
+    if (s == NULL || s->session == NULL)
+        return NULL;
+
+    return(s->session->psk_identity_hint);
+}
+
+const char *SSL_get_psk_identity(SSL *s)
+{
+    if (s == NULL || s->session == NULL)
+        return NULL;
+
+    return(s->session->psk_identity);
+}
+#endif
+
 void SSL_CTX_set_msg_callback(SSL_CTX *ctx,
                               void (*cb) (int write_p, int version,
                                           int content_type, const void *buf,
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' openssl-0.9.8zf~/ssl/ssl_locl.h openssl-0.9.8zf/ssl/ssl_locl.h
--- openssl-0.9.8zf~/ssl/ssl_locl.h	2015-03-19 15:46:46.000000000 +0200
+++ openssl-0.9.8zf/ssl/ssl_locl.h	2015-03-19 23:03:53.540201441 +0200
@@ -113,6 +113,32 @@
  * ECC cipher suite support in OpenSSL originally developed by
  * SUN MICROSYSTEMS, INC., and contributed to the OpenSSL project.
  */
+/* ====================================================================
+ * Copyright 2005 Nokia. All rights reserved.
+ *
+ * The portions of the attached software ("Contribution") is developed by
+ * Nokia Corporation and is licensed pursuant to the OpenSSL open source
+ * license.
+ *
+ * The Contribution, originally written by Mika Kousa and Pasi Eronen of
+ * Nokia Corporation, consists of the "PSK" (Pre-Shared Key) ciphersuites
+ * support (see draft-ietf-tls-psk-09) to OpenSSL.
+ *
+ * No patent licenses or other rights except those expressly stated in
+ * the OpenSSL open source license shall be deemed granted or received
+ * expressly, by implication, estoppel, or otherwise.
+ *
+ * No assurances are provided by Nokia that the Contribution does not
+ * infringe the patent or other intellectual property rights of any third
+ * party or that the license provides you with all the necessary rights
+ * to make use of the Contribution.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND. IN
+ * ADDITION TO THE DISCLAIMERS INCLUDED IN THE LICENSE, NOKIA
+ * SPECIFICALLY DISCLAIMS ANY LIABILITY FOR CLAIMS BROUGHT BY YOU OR ANY
+ * OTHER ENTITY BASED ON INFRINGEMENT OF INTELLECTUAL PROPERTY RIGHTS OR
+ * OTHERWISE.
+ */
 
 #ifndef HEADER_SSL_LOCL_H
 # define HEADER_SSL_LOCL_H
@@ -260,7 +286,7 @@
  * that the different entities within are mutually exclusive:
  * ONLY ONE BIT PER MASK CAN BE SET AT A TIME.
  */
-# define SSL_MKEY_MASK           0x000000FFL
+# define SSL_MKEY_MASK           0x200000FFL
 /* RSA key exchange */
 # define SSL_kRSA                0x00000001L
 /* DH cert RSA CA cert */
@@ -277,8 +303,9 @@
 /* ephemeral ECDH */
 # define SSL_kECDHE              0x00000080L
 # define SSL_EDH                 (SSL_kEDH|(SSL_AUTH_MASK^SSL_aNULL))
+# define SSL_kPSK                0x20000000L /* PSK */
 
-# define SSL_AUTH_MASK           0x00007F00L
+# define SSL_AUTH_MASK           0x80007f00L
 /* Authenticate with RSA */
 # define SSL_aRSA                0x00000100L
 /* Authenticate with DSS */
@@ -293,6 +320,7 @@
 # define SSL_aKRB5               0x00002000L
 /* Authenticate with ECDSA */
 # define SSL_aECDSA              0x00004000L
+# define SSL_aPSK                0x80000000L /* PSK */
 
 # define SSL_NULL                (SSL_eNULL)
 # define SSL_ADH                 (SSL_kEDH|SSL_aNULL)
@@ -301,6 +329,7 @@
 # define SSL_ECDH                (SSL_kECDH|SSL_kECDHE)
 # define SSL_FZA                 (SSL_aFZA|SSL_kFZA|SSL_eFZA)
 # define SSL_KRB5                (SSL_kKRB5|SSL_aKRB5)
+# define SSL_PSK                 (SSL_kPSK|SSL_aPSK)
 
 # define SSL_ENC_MASK            0x1C3F8000L
 # define SSL_DES                 0x00008000L
@@ -324,7 +353,7 @@
 # define SSL_SSLV3               0x02000000L
 # define SSL_TLSV1               SSL_SSLV3/* for now */
 
-/* we have used 1fffffff - 3 bits left to go. */
+/* we have used 8fffffff - 1 bits left to go. */
 
 /*
  * Export and cipher strength information. For each cipher we have to decide
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' openssl-0.9.8zf~/ssl/ssl_sess.c openssl-0.9.8zf/ssl/ssl_sess.c
--- openssl-0.9.8zf~/ssl/ssl_sess.c	2015-03-19 15:46:46.000000000 +0200
+++ openssl-0.9.8zf/ssl/ssl_sess.c	2015-03-19 23:05:56.388203515 +0200
@@ -55,6 +55,32 @@
  * copied and put under another distribution licence
  * [including the GNU Public Licence.]
  */
+/* ====================================================================
+ * Copyright 2005 Nokia. All rights reserved.
+ *
+ * The portions of the attached software ("Contribution") is developed by
+ * Nokia Corporation and is licensed pursuant to the OpenSSL open source
+ * license.
+ *
+ * The Contribution, originally written by Mika Kousa and Pasi Eronen of
+ * Nokia Corporation, consists of the "PSK" (Pre-Shared Key) ciphersuites
+ * support (see draft-ietf-tls-psk-09) to OpenSSL.
+ *
+ * No patent licenses or other rights except those expressly stated in
+ * the OpenSSL open source license shall be deemed granted or received
+ * expressly, by implication, estoppel, or otherwise.
+ *
+ * No assurances are provided by Nokia that the Contribution does not
+ * infringe the patent or other intellectual property rights of any third
+ * party or that the license provides you with all the necessary rights
+ * to make use of the Contribution.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND. IN
+ * ADDITION TO THE DISCLAIMERS INCLUDED IN THE LICENSE, NOKIA
+ * SPECIFICALLY DISCLAIMS ANY LIABILITY FOR CLAIMS BROUGHT BY YOU OR ANY
+ * OTHER ENTITY BASED ON INFRINGEMENT OF INTELLECTUAL PROPERTY RIGHTS OR
+ * OTHERWISE.
+ */
 
 #include <stdio.h>
 #include <openssl/lhash.h>
@@ -132,6 +158,10 @@
     ss->tlsext_hostname = NULL;
 #endif
     CRYPTO_new_ex_data(CRYPTO_EX_INDEX_SSL_SESSION, ss, &ss->ex_data);
+#ifndef OPENSSL_NO_PSK
+    ss->psk_identity_hint=NULL;
+    ss->psk_identity=NULL;
+#endif
     return (ss);
 }
 
@@ -608,6 +638,12 @@
     if (ss->tlsext_tick != NULL)
         OPENSSL_free(ss->tlsext_tick);
 #endif
+#ifndef OPENSSL_NO_PSK
+    if (ss->psk_identity_hint != NULL)
+        OPENSSL_free(ss->psk_identity_hint);
+    if (ss->psk_identity != NULL)
+        OPENSSL_free(ss->psk_identity);
+#endif
     OPENSSL_cleanse(ss, sizeof(*ss));
     OPENSSL_free(ss);
 }
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' openssl-0.9.8zf~/ssl/ssl_txt.c openssl-0.9.8zf/ssl/ssl_txt.c
--- openssl-0.9.8zf~/ssl/ssl_txt.c	2015-03-19 15:46:46.000000000 +0200
+++ openssl-0.9.8zf/ssl/ssl_txt.c	2015-03-19 23:08:53.672206509 +0200
@@ -55,6 +55,32 @@
  * copied and put under another distribution licence
  * [including the GNU Public Licence.]
  */
+/* ====================================================================
+ * Copyright 2005 Nokia. All rights reserved.
+ *
+ * The portions of the attached software ("Contribution") is developed by
+ * Nokia Corporation and is licensed pursuant to the OpenSSL open source
+ * license.
+ *
+ * The Contribution, originally written by Mika Kousa and Pasi Eronen of
+ * Nokia Corporation, consists of the "PSK" (Pre-Shared Key) ciphersuites
+ * support (see draft-ietf-tls-psk-09) to OpenSSL.
+ *
+ * No patent licenses or other rights except those expressly stated in
+ * the OpenSSL open source license shall be deemed granted or received
+ * expressly, by implication, estoppel, or otherwise.
+ *
+ * No assurances are provided by Nokia that the Contribution does not
+ * infringe the patent or other intellectual property rights of any third
+ * party or that the license provides you with all the necessary rights
+ * to make use of the Contribution.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND. IN
+ * ADDITION TO THE DISCLAIMERS INCLUDED IN THE LICENSE, NOKIA
+ * SPECIFICALLY DISCLAIMS ANY LIABILITY FOR CLAIMS BROUGHT BY YOU OR ANY
+ * OTHER ENTITY BASED ON INFRINGEMENT OF INTELLECTUAL PROPERTY RIGHTS OR
+ * OTHERWISE.
+ */
 
 #include <stdio.h>
 #include <openssl/buffer.h>
@@ -157,6 +183,17 @@
                 goto err;
         }
 #endif                          /* OPENSSL_NO_KRB5 */
+#ifndef OPENSSL_NO_PSK
+    if (BIO_puts(bp, "\n    PSK identity: ") <= 0)
+        goto err;
+    if (BIO_printf(bp, "%s", x->psk_identity ? x->psk_identity : "None") <= 0)
+        goto err;
+    if (BIO_puts(bp, "\n    PSK identity hint: ") <= 0)
+        goto err;
+    if (BIO_printf(bp, "%s",
+                   x->psk_identity_hint ? x->psk_identity_hint : "None") <= 0)
+        goto err;
+#endif
 #ifndef OPENSSL_NO_TLSEXT
     if (x->tlsext_tick_lifetime_hint) {
         if (BIO_printf(bp,
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' openssl-0.9.8zf~/ssl/tls1.h openssl-0.9.8zf/ssl/tls1.h
--- openssl-0.9.8zf~/ssl/tls1.h	2015-03-19 15:46:46.000000000 +0200
+++ openssl-0.9.8zf/ssl/tls1.h	2015-03-19 23:11:07.216208764 +0200
@@ -68,6 +68,32 @@
  * Vipul Gupta and Sumit Gupta of Sun Microsystems Laboratories.
  *
  */
+/* ====================================================================
+ * Copyright 2005 Nokia. All rights reserved.
+ *
+ * The portions of the attached software ("Contribution") is developed by
+ * Nokia Corporation and is licensed pursuant to the OpenSSL open source
+ * license.
+ *
+ * The Contribution, originally written by Mika Kousa and Pasi Eronen of
+ * Nokia Corporation, consists of the "PSK" (Pre-Shared Key) ciphersuites
+ * support (see draft-ietf-tls-psk-09) to OpenSSL.
+ *
+ * No patent licenses or other rights except those expressly stated in
+ * the OpenSSL open source license shall be deemed granted or received
+ * expressly, by implication, estoppel, or otherwise.
+ *
+ * No assurances are provided by Nokia that the Contribution does not
+ * infringe the patent or other intellectual property rights of any third
+ * party or that the license provides you with all the necessary rights
+ * to make use of the Contribution.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND. IN
+ * ADDITION TO THE DISCLAIMERS INCLUDED IN THE LICENSE, NOKIA
+ * SPECIFICALLY DISCLAIMS ANY LIABILITY FOR CLAIMS BROUGHT BY YOU OR ANY
+ * OTHER ENTITY BASED ON INFRINGEMENT OF INTELLECTUAL PROPERTY RIGHTS OR
+ * OTHERWISE.
+ */
 
 #ifndef HEADER_TLS1_H
 # define HEADER_TLS1_H
@@ -297,6 +323,12 @@
 # define TLS1_CK_ECDH_anon_WITH_AES_128_CBC_SHA          0x0300C018
 # define TLS1_CK_ECDH_anon_WITH_AES_256_CBC_SHA          0x0300C019
 
+/* PSK ciphersuites from RFC 4279 */
+#define TLS1_CK_PSK_WITH_RC4_128_SHA                    0x0300008A
+#define TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA               0x0300008B
+#define TLS1_CK_PSK_WITH_AES_128_CBC_SHA                0x0300008C
+#define TLS1_CK_PSK_WITH_AES_256_CBC_SHA                0x0300008D
+
 /*
  * XXX Inconsistency alert: The OpenSSL names of ciphers with ephemeral DH
  * here include the string "DHE", while elsewhere it has always been "EDH".
@@ -358,6 +390,12 @@
 # define TLS1_TXT_ECDH_anon_WITH_AES_128_CBC_SHA         "AECDH-AES128-SHA"
 # define TLS1_TXT_ECDH_anon_WITH_AES_256_CBC_SHA         "AECDH-AES256-SHA"
 
+/* PSK ciphersuites from RFC 4279 */
+#define TLS1_TXT_PSK_WITH_RC4_128_SHA                   "PSK-RC4-SHA"
+#define TLS1_TXT_PSK_WITH_3DES_EDE_CBC_SHA              "PSK-3DES-EDE-CBC-SHA"
+#define TLS1_TXT_PSK_WITH_AES_128_CBC_SHA               "PSK-AES128-CBC-SHA"
+#define TLS1_TXT_PSK_WITH_AES_256_CBC_SHA               "PSK-AES256-CBC-SHA"
+
 /* Camellia ciphersuites from RFC4132 */
 # define TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA          "CAMELLIA128-SHA"
 # define TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA       "DH-DSS-CAMELLIA128-SHA"
